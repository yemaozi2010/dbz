0.配置Git用户信息
git config --global user.naem "yemaozi2010"
git config --global user.email "hshunzhong1212@163.com"
git config --list   //查看config信息
1.初始化一个Git仓库
mkdir learngit
git init
2.添加文件到Git仓库
git add readme.txt
gtit commit -m "wrote a readme file"
git add file1.txt
git add file2.txt file3.txt
git commit -m "add 3 files"
3.查看仓库当前到状态
git status
4.查看与上次提交修改的内容有什么不同之处
git diff
5.显示从最近开始到最远到提交日志
git log
git log --pretty=oneline  //每条记录按一行来显示
6.在Git中，用HEAD表示当前版本，也就是最新的提交，上一个
版本就是HEAD^，上上个版本就是HEAD^^，往上100个版本就是
HEAD-100
git reset --hard 28828282  //回退到版本ID为28828282的版本
          //无需写全版本号，写前几位就可以了，git会自动匹配
git reset --hard HEAD^   //回退到上一个版本
7.Git提供了一个命令来记录你的每一次命令
git reflog
8.工作区和缓存区
Git和其他版本控制系统如SVN的一个不同之处就是有缓存区到概念。
工作区(Working Directory)就是电脑中看到的目录，比如
/home/bbwl/learngit文件夹就是一个工作区。
版本库(Repository)，工作区中有一个隐藏目录.git，这个可以看作
Git的版本库。
Git的版本库里存放了很多东西，其中最重要的就是被称为stageu（或者
叫index）的缓存区，还有Git为我们自动创建的第一个分支master，以及
指向master的一个指针叫HEAD。
我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步用git add把文件添加进去，实际上就是把文件修改添加到缓冲区；
第二步用git commit提交更改，实际上就是把缓存区的所有内容提交到
当前分支。
9.管理修改
为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是
修改，而非文件。
git diff HEAD -- readme.txt  
//查看工作区和版本库里面最新本版的区别。
10.撤销修改
git checkout -- filename可以丢弃工作区的修改
命令git checkout -- readme.txt的意思是，把readme.txt文件在工作
区的修改全部撤销，这里有两种情况：
一种是readme.txt自己修改后还没有被放到缓存区，现在，撤销修改就是
回到和版本库一模一样的状态；
一种是readme.txt已经添加到缓存库，又做了修改，现在，撤销修改就是
回到添加到缓存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add的状态。
git checkout -- filename 命令中到--很重要，没有--，就变成了“切换
到另一个分支"。
git reset HEAD filename 可以把缓存区到修改撤销(unstage)，重新
放回工作区。
git reset HEAD readme.txt 
git reset 命令既可以回退版本，也可以把缓存区到修改回退到工作区。
HEAD表示最新的版本。
撤销修改有如下3种场景：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区到修改
时，用命令 git checkout -- filename。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了缓存区时，
想丢弃修改，分两步，第一步用命令 git reset HEAD filename，将修改
从缓存区中移除，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合格的修改到版本库时，想要撤销本次提交，此时
需要版本回退，不过前提是没有推送到远程库。
10.删除文件
rm file1.txt
通过git status Git告诉你工作区和版本库不一致了，同时告诉你哪些
文件被删除了。此时有两种选择，一是确实要从版本库中删除该文件
git rm file1.txt
git commit -m "remove file1.txt"
另一种情况是删错了，因为版本库里还有，所以可以很轻松地把误删的
文件恢复到最新的版本，
git checkout -- file1.txt
git checkout其实就是用版本库里的版本替换工作区到版本，无论工作
区是修改还是删除，都可以"一键还原"。
命令git rm 用于删除一个文件。如果一个文件已经被提交到版本库，
那么你永远不用担心误删，但要小心，你只能恢复文件到最新版本，
你会丢失最近一次提交后你修改的内容。
11.远程仓库
Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。
怎么分布呢？最早，肯定只有一台机器有一个原始版本，此后，别的机器
可以“克隆”这个原始版本，而且每台机器的版本库其实都是一样的，没有
主次之分。
注册一个GitHub帐号，就可以免费获得git远程仓库。由于你的本地Git
仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
第一步，创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，
再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。如果已经有了，
可以直接跳到下一步。
ssh-keygen -t rsa -C "youremail@example.com"
一路回车使用默认值就可以。
第二步，登录GitHub，打开"Account setting","SSH Keys",点"Add SSH
Key"，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容。
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实
是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要
知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司
提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以
在每台电脑上往GitHub推送了。
12.添加远程库
要关联一个远程库，使用命令
git remote add origin git@server-name:path/repo-name.git，如：
git remote add origin git@github.com:yemaozi2010/dbz.git
关联后，使用命令
git push -u origin master第一次推送master分支的所有内容。
此后，每次本地提交后，只要有必要，就可以使用命令
git push origin master推送最新修改。
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的
存在，也就是有没有网络都可以正常工作，而SVN在没有联网的时候是拒绝
干活的！当有网络的时候，再把本地提交推送一下就完成了同步，非常
方便！
13.从远程库克隆
用命令git clone克隆一个本地库
 git clone git@github.com:yemaozi2010/gitskills.git
你也许还注意到，GitHub给出的地址不止一个，还可以用
https://github.com/michaelliao/gitskills.git这样的地址。
实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https
等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入
口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能
用https。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
14.分支管理
分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两
周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，
不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，
又存在丢失每天进度的巨大风险。
现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看
不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，
想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，
既安全，又不影响别人工作。
其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，
这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，
结果分支功能成了摆设，大家都不去用。
但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟
之内就能完成！无论你的版本库是1个文件还是1万个文件。
15.创建与合并分支
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，
这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，
这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，
而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
首先，我们创建dev分支，然后切换到dev分支。
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch dev
git checkout dev
然后，用git branch命令查看当前分支，
然后，我们就可以在dev分支上正常提交，
dev分支的工作完成，我们就可以切换回master分支：
git checkout master
切换回master分支后，再查看一个gitnote.txt文件，刚才添加的内容不见了！
因为那个提交是在dev分支上，而master分支此刻的提交点并没有变。
现在，我们把dev分支的工作成果合并到master分支上：
git merge dev
git merge命令用于合并指定分支到当前分支。合并后，再查看gitnote.txt
的内容，就可以看到，和dev分支的最新提交是完全一样的。
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，
也就是直接把master指向dev的当前提交，所以合并速度非常快。
当然，也不是每次合并都能Fast-forward，我们后面会将其他方式的合并。
合并完成后，就可以放心地删除dev分支了：
git branch -d dev
删除后，查看branch，就只剩下master分支了
git branch
因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，
合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
16.解决冲突
git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图
git log --graph --pretty=oneline --abbrev-commit
17.分支管理策略
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，
删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，
从分支历史上就可以看出分支信息。
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
git merge --no-ff -m "merge with no-ff" dev
合并后，我们用git log看看分支历史：
git log --graph --pretty=oneline --abbrev-commit
*   dbc6b77 Merge branch 'dev'
|\  
| * 77eabd9 dev content5
* |   88a6add just for dev content4
|\ \  
| |/  
| * a0178bc dev content4
|/  
* 96862c8 dev content3
* ccd6227 dev content2
* 04e7ebe dev content1
*   2862286 Merge branch 'dev'
|\  
| * 682b33e newly add
* |   1545211 Merge branch 'dev'
分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在
上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，
比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地
往dev分支上合并就可以了。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
18.Bug分支
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支
issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。
但是，必须在两个小时内修复该bug，怎么办？
幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复
现场后继续工作：
git stash
现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），
因此可以放心地创建分支来修复bug。
首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master
创建临时分支：
git checkout master
git checkout -b issue-101
现在修复bug，需要把“Git is free software ...”改为“Git is a free
software ...”，然后提交：
git add readme.txt 
git commit -m "fix bug 101"
修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
git checkout master
git merge --no-ff -m "merged bug fix 101" issue-101
git branch -d issue-101
太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支
干活了！
$ git checkout dev
Switched to branch 'dev'
$ git status
# On branch dev
nothing to commit (working directory clean)
工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
$ git stash list
stash@{0}: WIP on dev: 6224937 add merge
git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用
git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：
$ git stash pop
# On branch dev
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       new file:   hello.py
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working 
#         directory)
#
#       modified:   readme.txt
#
Dropped refs/stash@{0} (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)
再用git stash list查看，就看不到任何stash内容了
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的
stash，用命令：
$ git stash apply stash@{0}
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复
后，再git stash pop，回到工作现场。
19.feature分支
软件开发中，总有无穷无尽的新的功能要不断添加进来。
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，
所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，
合并，最后，删除该feature分支。
现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用
于下一代星际飞船。
于是准备开发：
git checkout -b feature-vulcan
5分钟后，开发完毕：
$ git add vulcan.py
$ git status
$ git commit -m "add feature vulcan"
切回dev，准备合并：
$ git checkout dev
一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。
但是，
就在此时，接到上级命令，因经费不足，新功能必须取消！
虽然白干了，但是这个分支还是必须就地销毁：
$ git branch -d feature-vulcan
error: The branch 'feature-vulcan' is not fully merged.
If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢
失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。
现在我们强行删除：
$ git branch -D feature-vulcan
Deleted branch feature-vulcan (was 756d4af).
终于删除成功！
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
20.多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支
对应起来了，并且，远程仓库的默认名称是origin。
要查看远程库的信息，用git remote：
$ git remote
origin
或者用git remote -v显示更详细的信息：
$ git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到
push的地址。
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地
分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
$ git push origin master
如果要推送其他分支，比如dev，就改成：
$ git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些
不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周
到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情
而定！
抓取分支
多人协作时，大家都会往master和dev分支上推送各自的修改。
现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）
或者同一台电脑的另一个目录下克隆：
git clone https://github.com/yemaozi2010/dbz.git
Cloning into 'dbz'...
remote: Counting objects: 171, done.
remote: Compressing objects: 100% (79/79), done.
remote: Total 171 (delta 103), reused 158 (delta 90), pack-reused 0
Receiving objects: 100% (171/171), 22.35 KiB | 0 bytes/s, done.
Resolving deltas: 100% (103/103), done.
Checking connectivity... done.
当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的
master分支。不信可以用git branch命令看看：
$ git branch
* master
现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，
于是他用这个命令创建本地dev分支：
git checkout -b dev origin/dev
现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：
git add gitnote.txt
git commit -m "add clone comment 1"
git push origin dev
你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作
了修改，并试图推送：
git add gitnote.txt
git commit -m "git push comment 1"
git push origin dev
To git@github.com:yemaozi2010/dbz.git
! [rejected]        dev -> dev (fetch first)
error: failed to push some refs to 'git@github.com:yemaozi2010/dbz.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，
Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合
并，解决冲突，再推送：
$ git pull
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:michaelliao/learngit
fc38031..291bea8  dev        -> origin/dev
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details
git pull <remote> <branch>
If you wish to set tracking information for this branch you can do so with:
git branch --set-upstream dev origin/<branch>
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，
根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream dev origin/dev
Branch dev set up to track remote branch dev from origin.
再pull：
git pull
Auto-merging gitnote.txt 
CONFLICT (content): Merge conflict in gitnote.txt
Automatic merge failed; fix conflicts and then commit the result.
这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的
解决冲突完全一样。解决后，提交，再push：
$ git commit -m "merge and fix 1"
$ git push origin dev
因此，多人协作的工作模式通常是这样：
1.首先，可以试图用git push origin branch-name推送自己的修改；
2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3.如果合并有冲突，则解决冲突，并在本地提交；
4.没有冲突或解决掉冲突后，再用git push origin branch-name推送就能成功。
如果git pull提示"no tracking information"，则说明本地分支和远程分支的链接关系
没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull
抓取远程的新提交；
在本地创建和远程分支对应的分支，使用
git checkout -b branch-name origin/branch-name
本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用
git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
21.创建标签
发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻
的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本
取出来。所以，标签也是版本库的一个快照。
git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像
对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。
在Git中打标签非常简单，首先，切换到需要打标签的分支上：
$ git branch
* dev
  master
$ git checkout master
Switched to branch 'master'
然后，敲命令git tag <name>就可以打一个新标签：
$ git tag v1.0
可以用命令git tag查看所有标签。
默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是
周五了，但应该在周一打的标签没有打，怎么办？
方法是找到历史提交的commit id，然后打上就可以了
$ git log --pretty=oneline --abbrev-commit
fd73e2a 标签管理1
394b162 多人协作小结
0a37648 多人协作4
788c475 多人协作3
347ac00 window push comment 1
e647096 just for test1
7d4010e resolve conflict for push 1
1f6f0d8 pull comment 2
bdca459 pull comment 1
比方说要对add merge这次提交打标签，它对应的commit id是394b162，敲入命令：
$ git tag v0.1 394b162
注意，标签不是按时间顺序列出，而是按字母排序的。
可以用git show <tagname>查看标签信息：
git show v0.1
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
$ git tag -a dev_v0.2 -m "tag for dev v0.2" 7d4010
还可以通过-s用私钥签名一个标签：
$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有
gpg密钥对，就会报错。
如果报错，请参考GnuPG帮助文档配置Key。
带GPG签名的Git tag
Tag即标签，用以给项目仓储打标签，通常用作里程碑标识，以方便项目进度、发布
版本管理及规划。 
Git tag可以用来创建标签，列出标签表，删除标签及用以验证带有GPG签名的带标签
的项目。
git tag常见用法
创建Tag
git tag v1.0 >标记当前位置为tag，tag名为v1.0
git tag -m "Say something" v1.0 >标记当前位置为tag，
tag描述为"Say something", tag名为v1.0
列出tag表
git tag (-l) >列出tag表，只显示标签名
git tag -ln >列出tag表，并显示其message（描述）
删除tag
git tag -d [tag name] >删除某个tag
验证tag
git tag -v [tag name] >验证某个tag的GPG签名
GPG是加密软件，可以使用GPG生成的公钥在网上安全的传播你的文件、代码。
为什么说安全的？
以Google所开发的repo为例，repo即采用GPG验证的方式，每个里程碑tag都带有GPG
加密验证，假如在里程碑v1.12.3处你想要做修改，修改完后将这个tag删除，然后
又创建同名tag指向你的修改点，这必然是可以的。但是，在你再次clone你修改后
的项目时，你会发现，你对此里程碑tag的改变不被认可，验证失败，导致你的修改
在这里无法正常实现。这就是GPG验证的作用，这样就能够保证项目作者（私钥持有者）
所制定的里程碑别人将无法修改。那么，就可以说，作者的代码是安全传播的。
为什么会有这种需求？
一个项目从开发到发布，再到后期的更新迭代，一定会存在若干的稳定版本与
开发版本（存在不稳定因素）。作为项目发起者、持有者，有权定义他（们）所认可
的稳定版本，这个稳定版本，将不允许其他开发者进行改动。
还以Google的repo项目为例，项目所有者定义项目开发过程中的点A为稳定版v1.12.3，
那么用户在下载v1.12.3版本后，使用的肯定是A点所生成的项目、产品，就算其他开发
者能够在本地对v1.12.3进行重新指定，指定到他们修改后的B点，但是最终修改后的
版本给用户用的时候，会出现GPG签名验证不通过的问题，也就是说这样的修改是不生效的。
可能还是不太好理解，说一个我曾经遇过的坑，repo在某个版本有个小错误，我在这
个版本修复错误后，提交到内网的服务器给同事用（我重新定义这个版本的指向），最后
发现同事在更新项目后，出现版本GPG签名验证错误，不能正常使用。
说了这么多，希望大家能够理解GPG签名验证的意义所在。下边就说一说，如何在你的
项目中使用这种方式生成GPG Key。
gpg --gen-key 然后根据提示选择你要的签名
对以上信息进行确认，然后输入身份，最终确认，等待生成GPG Key。
生成过程中可能出现类似提示：
随机字节不够多。请再做一些其他的琐事，以使操作系统能搜集到更多的熵！
(还需要174字节)
疯狂的敲打键盘吧，不过看好还需要多少，悠着点。
稍等片刻，GPG Key就能生成好了，验证一下是否生成成功：
gpg --list-keys
如果输出类似信息就代表属于你的GPG Key生成成功了：
/home/keven/.gnupg/pubring.gpg
------------------------------
pub   2048R/AF26C87F 2013-09-30
uid   Keven Liu (Gpg key for Keven Liu<airk908@gmail.com>) <airk908@gmail.com>
sst-secret-keysub   2048R/C9A00F19 2013-09-30
上边显示的是公钥，顺便也看一下与之匹配的私钥生成如何：
gpg --list-secret-keys
如果成功，会显示类似信息，不过文件位置应该是/home/keven/.gnupg/pubring.gpg
（keven是我的用户名，你的机器上该是你的）
使用GPG加密你的tag：
git tag -s v0.2 -m "signed version 0.2 released" bdca459
fatal: 'my tag message' is not a valid tag name.
bbwl@bbwl-ThinkPad-X61:~/learngit$ git tag -s v0.2 -m 
"signed version 0.2 released" bdca459
gpg: skipped "yemaozi2010 <hshunzhong1212@163.com>": secret key not available
gpg: signing failed: secret key not available
error: gpg failed to sign the data
error: unable to sign the tag
这个错误一Google的话都是教你怎么生成一个GPG Key，其实不然，git tag
有一条help这样写到：
-u, --local-user <key-id> 使用另一个Key签名此tag
所以，这个错误可以这样解决：
git tag -u "shunzhonghuang" -s v0.2 -m "signed version 0.2 released" 9d18ea1
这样，你的tag就用刚刚生成的GPG Key签名了。可以查看一下项目的tag验证信息：
$ git tag -v v0.2
object 9d18ea18662d533965be350ed2c6d3f72c2fd47c
type commit
tag v0.2
tagger yemaozi2010 <hshunzhong1212@163.com> 1446219195 +0800
signed version 0.2 released
gpg: Signature made 2015年10月30日 星期五 23时33分15秒 CST using RSA key ID 29ECC2C2
gpg: Good signature from "shunzhonghuang (gpg key for shunzhonghuang) 
<hshunzhong1212@126.com>"
至此，带有GPG签名验证的tag就做好了，其他开发者将无法修改你所签名的这个tag。





0.配置Git用户信息
git config --global user.naem="yemaozi2010"
git config --global user.email="hshunzhong1212@163.com"
git config --list   //查看config信息
1.初始化一个Git仓库
mkdir learngit
git init
2.添加文件到Git仓库
git add readme.txt
gtit commit -m "wrote a readme file"
git add file1.txt
git add file2.txt file3.txt
git commit -m "add 3 files"
3.查看仓库当前到状态
git status
4.查看与上次提交修改的内容有什么不同之处
git diff
5.显示从最近开始到最远到提交日志
git log
git log --pretty=oneline  //每条记录按一行来显示
6.在Git中，用HEAD表示当前版本，也就是最新的提交，上一个
版本就是HEAD^，上上个版本就是HEAD^^，往上100个版本就是
HEAD-100
git reset --hard 28828282  //回退到版本ID为28828282的版本
          //无需写全版本号，写前几位就可以了，git会自动匹配
git reset --hard HEAD^   //回退到上一个版本
7.Git提供了一个命令来记录你的每一次命令
git reflog
8.工作区和缓存区
Git和其他版本控制系统如SVN的一个不同之处就是有缓存区到概念。
工作区(Working Directory)就是电脑中看到的目录，比如
/home/bbwl/learngit文件夹就是一个工作区。
版本库(Repository)，工作区中有一个隐藏目录.git，这个可以看作
Git的版本库。
Git的版本库里存放了很多东西，其中最重要的就是被称为stageu（或者
叫index）的缓存区，还有Git为我们自动创建的第一个分支master，以及
指向master的一个指针叫HEAD。
我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步用git add把文件添加进去，实际上就是把文件修改添加到缓冲区；
第二步用git commit提交更改，实际上就是把缓存区的所有内容提交到
当前分支。
9.管理修改
为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是
修改，而非文件。
git diff HEAD -- readme.txt  
//查看工作区和版本库里面最新本版的区别。
10.撤销修改
git checkout -- filename可以丢弃工作区的修改
命令git checkout -- readme.txt的意思是，把readme.txt文件在工作
区的修改全部撤销，这里有两种情况：
一种是readme.txt自己修改后还没有被放到缓存区，现在，撤销修改就是
回到和版本库一模一样的状态；
一种是readme.txt已经添加到缓存库，又做了修改，现在，撤销修改就是
回到添加到缓存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add的状态。
git checkout -- filename 命令中到--很重要，没有--，就变成了“切换
到另一个分支"。
git reset HEAD filename 可以把缓存区到修改撤销(unstage)，重新
放回工作区。
git reset HEAD readme.txt 
git reset 命令既可以回退版本，也可以把缓存区到修改回退到工作区。
HEAD表示最新的版本。
撤销修改有如下3种场景：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区到修改
时，用命令 git checkout -- filename。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了缓存区时，
想丢弃修改，分两步，第一步用命令 git reset HEAD filename，将修改
从缓存区中移除，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合格的修改到版本库时，想要撤销本次提交，此时
需要版本回退，不过前提是没有推送到远程库。
10.删除文件
rm file1.txt
通过git status Git告诉你工作区和版本库不一致了，同时告诉你哪些
文件被删除了。此时有两种选择，一是确实要从版本库中删除该文件
git rm file1.txt
git commit -m "remove file1.txt"
另一种情况是删错了，因为版本库里还有，所以可以很轻松地把误删的
文件恢复到最新的版本，
git checkout -- file1.txt
git checkout其实就是用版本库里的版本替换工作区到版本，无论工作
区是修改还是删除，都可以"一键还原"。
命令git rm 用于删除一个文件。如果一个文件已经被提交到版本库，
那么你永远不用担心误删，但要小心，你只能恢复文件到最新版本，
你会丢失最近一次提交后你修改的内容。


